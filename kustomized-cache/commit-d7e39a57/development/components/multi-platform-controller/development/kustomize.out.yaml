apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-reader
  namespace: multi-platform-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-controller-manager
  namespace: multi-platform-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: multi-platform-controller
  name: pipeline-anyuid-role
  namespace: multi-platform-controller
rules:
- apiGroups:
  - security.openshift.io
  resourceNames:
  - anyuid
  resources:
  - securitycontextconstraints
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - taskruns
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - taskruns/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-platform-controller-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grant-argocd
  namespace: multi-platform-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: multi-platform-controller
  name: pipeline-anyuid-rolebinding
  namespace: multi-platform-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pipeline-anyuid-role
subjects:
- kind: ServiceAccount
  name: pipeline
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-platform-controller-manager-role
subjects:
- kind: ServiceAccount
  name: multi-platform-controller-controller-manager
  namespace: multi-platform-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-platform-controller-proxy-role
subjects:
- kind: ServiceAccount
  name: multi-platform-controller-controller-manager
  namespace: multi-platform-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-multi-platform-controller-metrics-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-platform-controller-metrics-reader
subjects:
- kind: ServiceAccount
  name: metrics-reader
  namespace: multi-platform-controller
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: metrics-reader
  name: metrics-reader
  namespace: multi-platform-controller
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: multi-platform-controller
    control-plane: controller-manager
  name: multi-platform-controller-controller-manager-metrics-service
  namespace: multi-platform-controller
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app: multi-platform-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller-monitor
  namespace: multi-platform-controller
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: probes
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    app: multi-platform-controller
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: otp-tls-secrets
  labels:
    app: multi-platform-otp-server
  name: multi-platform-otp-server
  namespace: multi-platform-controller
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: multi-platform-otp-server
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: multi-platform-controller
  name: multi-platform-controller
  namespace: multi-platform-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multi-platform-controller
  template:
    metadata:
      labels:
        app: multi-platform-controller
    spec:
      containers:
      - args:
        - --http2-disable
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --zap-encoder=console
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/konflux-ci/multi-platform-controller:db94eab37393198b0ca284823e7941d766177ac0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 8081
          name: probes
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: multi-platform-controller-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: multi-platform-otp-server
  name: multi-platform-otp-server
  namespace: multi-platform-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multi-platform-otp-server
  template:
    metadata:
      labels:
        app: multi-platform-otp-server
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/konflux-ci/multi-platform-controller-otp-service:db94eab37393198b0ca284823e7941d766177ac0
        imagePullPolicy: Always
        name: multi-platform-otp-server
        ports:
        - containerPort: 8080
          name: server
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tls
          name: tls
      securityContext:
        runAsNonRoot: true
      volumes:
      - name: tls
        secret:
          secretName: otp-tls-secrets
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: multi-platform-controller-metrics-monitor
  namespace: multi-platform-controller
spec:
  endpoints:
  - bearerTokenSecret:
      key: token
      name: metrics-reader
    interval: 15s
    path: /metrics
    port: https
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  selector:
    matchLabels:
      control-plane: controller-manager
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app: multi-platform-controller
  name: clean-shared-host
  namespace: multi-platform-controller
spec:
  description: This task will clean up after a build
  params:
  - name: SECRET_NAME
    type: string
  - name: TASKRUN_NAME
    type: string
  - name: NAMESPACE
    type: string
  - name: HOST
    type: string
  - name: USER
    type: string
  steps:
  - image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
    imagePullPolicy: IfNotPresent
    name: provision
    script: |
      #!/bin/bash
      cd /tmp
      set -o verbose
      set -eu
      cp $(workspaces.ssh.path)/id_rsa /tmp/master_key
      chmod 0400 /tmp/master_key
      export SSH_HOST=$(params.USER)@$(params.HOST)

      export USERNAME=u-$(echo $(params.TASKRUN_NAME)$(params.NAMESPACE) | md5sum | cut -b-28)
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST sudo killall -9 -u $USERNAME || true
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST sudo userdel -f -r -Z $USERNAME
  workspaces:
  - name: ssh
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app: multi-platform-controller
  name: provision-shared-host
  namespace: multi-platform-controller
spec:
  description: This task will create a new user on a host, setup ssh keys, and then
    create the relevant secret.
  params:
  - name: SECRET_NAME
    type: string
  - name: TASKRUN_NAME
    type: string
  - name: NAMESPACE
    type: string
  - name: HOST
    type: string
  - name: USER
    type: string
  - name: SUDO_COMMANDS
    type: string
  stepTemplate:
    env:
    - name: SECRET_NAME
      value: $(params.SECRET_NAME)
    - name: TASKRUN_NAME
      value: $(params.TASKRUN_NAME)
    - name: NAMESPACE
      value: $(params.NAMESPACE)
    - name: HOST
      value: $(params.HOST)
    - name: USER
      value: $(params.USER)
    - name: SUDO_COMMANDS
      value: $(params.SUDO_COMMANDS)
  steps:
  - image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
    imagePullPolicy: IfNotPresent
    name: provision
    script: |
      #!/bin/bash
      cd /tmp
      set -o verbose
      set -eu
      set -o pipefail
      mkdir -p /root/.ssh
      cp $(workspaces.ssh.path)/id_rsa /tmp/master_key
      chmod 0400 /tmp/master_key
      export SSH_HOST="$USER@$HOST"

      export USERNAME=u-$(echo "$TASKRUN_NAME$NAMESPACE" | md5sum | cut -b-28)

      cat >script.sh <<EOF
      sudo dnf install podman -y
      rm -f $USERNAME $USERNAME.pub
      # sometimes it hits  "useradd: cannot lock /etc/passwd; try again later" error, so need to repeat
      for i in {10..1}; do
        sudo useradd -m $USERNAME -p $(openssl rand -base64 12) && break
        sleep 1
      done
      ssh-keygen -N '' -f $USERNAME
      sudo su $USERNAME -c 'mkdir /home/$USERNAME/.ssh'
      sudo su $USERNAME -c 'mkdir /home/$USERNAME/build'
      sudo mv $USERNAME.pub /home/$USERNAME/.ssh/authorized_keys
      sudo chown $USERNAME /home/$USERNAME/.ssh/authorized_keys
      sudo restorecon -FRvv /home/$USERNAME/.ssh
      EOF

      if [ ! -z "$SUDO_COMMANDS" ]; then
      #if we need sudo access add it to the script
      cat >>script.sh <<EOF
      echo "$USERNAME ALL=(ALL) NOPASSWD: $SUDO_COMMANDS" | sudo tee /etc/sudoers
      EOF
      fi
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST "bash -s" <script.sh
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST cat $USERNAME  >id_rsa
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST rm $USERNAME
      chmod 0400 id_rsa
      HOST=$(echo "$USERNAME@$HOST" | base64 -w 0)
      DIR=$(echo /home/$USERNAME | base64 -w 0)

      if [ -e "/tls/tls.crt" ]; then
        KEY=$(cat id_rsa)
        OTP=$(curl --cacert /tls/tls.crt -XPOST -d "$KEY" https://multi-platform-otp-server.multi-platform-controller.svc.cluster.local/store-key | base64 -w 0)
        OTP_SERVER="$(echo https://multi-platform-otp-server.multi-platform-controller.svc.cluster.local/otp | base64 -w 0)"
        echo $OTP | base64 -d
        cat >secret.yaml <<EOF
        apiVersion: v1
        data:
          otp-ca: "$(cat /tls/tls.crt | base64 -w 0)"
          otp: "$OTP"
          otp-server: "$OTP_SERVER"
          host: "$HOST"
          user-dir: "$DIR"
        kind: Secret
        metadata:
          name: "$SECRET_NAME"
          namespace: "$NAMESPACE"
          labels:
            build.appstudio.redhat.com/multi-platform-secret: "true"
        type: Opaque
      EOF
      else
        KEY=$(cat id_rsa | base64 -w 0)
        cat >secret.yaml <<EOF
        apiVersion: v1
        data:
          id_rsa: "$KEY"
          host: "$HOST"
          user-dir: "$DIR"
        kind: Secret
        metadata:
          name: "$SECRET_NAME"
          namespace: "$NAMESPACE"
          labels:
            build.appstudio.redhat.com/multi-platform-secret: "true"
        type: Opaque
      EOF
      fi

      kubectl create -f secret.yaml
    volumeMounts:
    - mountPath: /tls
      name: tls
  volumes:
  - name: tls
    secret:
      optional: true
      secretName: otp-tls-secrets
  workspaces:
  - name: ssh
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app: multi-platform-controller
  name: update-host
  namespace: multi-platform-controller
spec:
  description: This task will create a new user on a host, setup ssh keys, and then
    create the relevant secret.
  params:
  - name: HOST
    type: string
  - name: USER
    type: string
  steps:
  - image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
    imagePullPolicy: IfNotPresent
    name: update
    script: |
      #!/bin/bash
      cd /tmp
      set -o verbose
      mkdir -p /root/.ssh
      cp $(workspaces.ssh.path)/id_rsa /tmp/master_key
      chmod 0400 /tmp/master_key
      export SSH_HOST=$(params.USER)@$(params.HOST)
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST "sudo dnf update -y"

      #now clean up any dangling users, if their cleanup failed for whatever reason

      cat >script.sh <<EOF
      threshold=$(date -d "1 day ago" +%s)
      cd /home
      for file in u-*; do
        # Check if the file is a regular file and older than the threshold
        if [[ $(stat -c "%Y" "$file") -lt $threshold ]]; then
        # Delete the user
        sudo userdel -f -r -Z $file
        echo "Deleted: $file"
        fi
      done
      EOF
      ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST "bash -s" <script.sh
  workspaces:
  - name: ssh
