SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"  
ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"/..

CACHE_DIR=$ROOT/kustomized-cache
COMPARE_ROOT=$ROOT/change-history 

function ktry() {  
    COMPONENT_DIR=$1
    COMMIT_DIR=$2 
    OUT_DIR=$COMMIT_DIR/$COMPONENT_DIR 
    OUT_FILE=$OUT_DIR/kustomize.out.yaml 
    if [ ! -f "$OUT_FILE" ]; then 
        K1=$COMPONENT_DIR 
        if [ -f "$K1/kustomization.yaml" ]; then 
            echo -n . 
            mkdir -p $OUT_DIR   
            echo "Running: kustomize build $K1"
            kustomize build $K1 | grep -v PASSWOR | cat > $OUT_FILE  
        fi  
    fi
    if [ -f "$OUT_FILE" ]; then 
        LINT_FILE=$OUT_DIR/kustomize.out.lint
        if [ ! -f "$LINT_FILE" ]; then
            echo "Running: Linting $OUT_FILE"
            $ROOT/bin/kube-linter lint $OUT_FILE | sed s#$ROOT#./#g  > $LINT_FILE 
        fi  
    fi
}

OVERLAYS="production staging development"

function generateManifests()  { 
    COMMIT=$1
    echo -n "Generating kustomize for Tag $COMMIT " 
    for overlay in $OVERLAYS
    do  
        COMMIT_DIR=$CACHE_DIR/commit-$COMMIT/$overlay
        mkdir -p $COMMIT_DIR
        APP_OF_APPS=$COMMIT_DIR/app-of-apps-$overlay.yaml 
        if [ -f "$APP_OF_APPS" ]; then 
            echo -n .
        else  
            echo "Running: git checkout $COMMIT ; kustomize build argo-cd-apps/overlays/$overlay "
            kustomize build argo-cd-apps/overlays/$overlay >$APP_OF_APPS
        fi
        # currently hard coded envs, need to parse App of Apps for each overlay dev, stage, prod
        for component in components/* 
        do 
            ktry $component $COMMIT_DIR   
            ktry $component/$overlay $COMMIT_DIR  
            for multi in $component/$overlay/stone*
            do
                ktry $multi $COMMIT_DIR   
            done  
        done 
        wait  
        LINT_FILE=$COMMIT_DIR.lint
        rm $LINT_FILE
        touch $LINT_FILE  
        echo "Concatentate all the lint files for $COMMIT_DIR"
        find $COMMIT_DIR -name kustomize.out.lint -print | xargs -n1 cat >>$LINT_FILE
    done
    echo
}

COMMIT_CURRENT=$1
if [[ -z "$COMMIT_CURRENT" ]]; then
  echo "No start commit parameter, will use current HEAD and HEAD^ to compute diff"
  COMMIT_CURRENT=$(git rev-parse --short HEAD)   
else  
  git checkout $COMMIT_CURRENT   >/dev/null 2>&1
fi


DATE=$(TZ=UTC0 git show --quiet --date='format-local:%Y-%m-%d-%H-%M-%S' --format="%cd" $COMMIT_CURRENT) 
FNAME_SORTED=$DATE
generateManifests  $COMMIT_CURRENT

COMMIT_PREV=$2
if [[ -z "$COMMIT_PREV" ]]; then
  echo "No end commit parameter, will use current HEAD and HEAD^ to compute diff"
  git checkout HEAD^ >/dev/null 2>&1 
  COMMIT_PREV=$(git rev-parse --short HEAD)   
else  
  git checkout $COMMIT_PREV   >/dev/null 2>&1
fi 
generateManifests $COMMIT_PREV


COMPARE_DIR=$COMPARE_ROOT/$FNAME_SORTED-$COMMIT_PREV-$COMMIT_CURRENT
mkdir -p $COMPARE_DIR  
GDIFF=$COMPARE_DIR/diff-git
git diff $COMMIT_PREV...$COMMIT_CURRENT > $GDIFF

DATE=$(TZ=UTC0 git show --quiet --date='local' --format="%cd" $COMMIT_CURRENT) 
echo "changes from $COMMIT_PREV to $COMMIT_CURRENT on $DATE" > $COMPARE_DIR/title

echo "Diff size for git: $(wc -l $GDIFF)" 
for overlay in $OVERLAYS
do 
    COMMIT_DIR=$CACHE_DIR/commit-$COMMIT/$overlay  

    #compare between two revisions
    DIR_CURRENT=$CACHE_DIR/commit-$COMMIT_CURRENT/$overlay
    LINT_CURRENT=$DIR_CURRENT.lint
    DIR_PREV=$CACHE_DIR/commit-$COMMIT_PREV/$overlay
  
    echo "Commit $COMMIT_CURRENT in $DIR_CURRENT" 
    echo "Commit $COMMIT_PREV in $DIR_PREV"  

    K_DIR=$COMPARE_DIR/$overlay  
    mkdir -p $K_DIR  
    KDIFF=$K_DIR/diff-kustomize
    LINT_COPY=$K_DIR/lint  
    diff -r $DIR_CURRENT $DIR_PREV --exclude=kustomize.out.lint | sed s#$ROOT/#./#g  >$KDIFF
    if [ -f "$LINT_CURRENT" ]; then 
        cp $LINT_CURRENT $LINT_COPY
    fi 
    echo "Diff size for kustomize: $(wc -l $KDIFF)"
    echo
done
